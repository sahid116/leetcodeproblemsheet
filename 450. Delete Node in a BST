class Solution {
public:
    TreeNode* last(TreeNode* node){
        if(node->right==NULL) return node;
        return last(node->right);
    }
    TreeNode* helper(TreeNode* root){
        if(root->left==NULL) return root->right;
        if(root->right==NULL) return root->left;
        TreeNode* right=root->right;
        TreeNode* lastright=last(root->left);
        lastright->right=right;
        return root->left;
    }
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(root==NULL) return NULL;
        if(root->val==key) return helper(root);
        TreeNode* gummy=root;
        while(root!=NULL){
            if(root->val>key){
                if(root->left&&root->left->val==key){
                    root->left=helper(root->left);
                    break;
                }
                else root=root->left;
            }
            else{
                if(root->right&&root->right->val==key){
                  root->right=helper(root->right);
                    break;
                }
                else root=root->right;
            }
        }
        return gummy;
    }
};
