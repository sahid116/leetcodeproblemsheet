class Solution {
    void markparents(TreeNode* root,unordered_map<TreeNode*,TreeNode*>&parents_track,TreeNode* target){
        queue<TreeNode*>q;
        q.push(root);
        while(!q.empty()){
           TreeNode* current=q.front();
            q.pop();
            if(current->left){
                q.push(current->left);
                parents_track[current->left]=current;
            }
            if(current->right){
                q.push(current->right);
                parents_track[current->right]=current;
            }
        
        }
    }
public:
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        unordered_map<TreeNode*,TreeNode*>parents_track;
        markparents(root,parents_track,target);
        unordered_map<TreeNode*,bool>visited;
        visited[target]=true;
        queue<TreeNode*>q;
        q.push(target);
        int cur_level=0;
        while(!q.empty()){
            int size=q.size();
            if(cur_level++ ==k) break;
            for(int i=0;i<size;i++){
              TreeNode* current=q.front();
                q.pop();
                if(current->left&&!visited[current->left]){
                   q.push(current->left);
                    visited[current->left]=true;
                }
                if(current->right&&!visited[current->right]){
                  q.push(current->right);
                    visited[current->right]=true;
                
                }
                if(parents_track[current]&&!visited[parents_track[current]]){
                q.push(parents_track[current]);
                    visited[parents_track[current]]=true;
                }
            
            }
        }
        vector<int>res;
        while(!q.empty()){
          TreeNode* current=q.front();
            q.pop();
            res.push_back(current->val);
        
        }
        return res;
    }
};
